package ${package.Controller};


import io.swagger.annotations.Api;
import org.springframework.web.bind.annotation.RequestMapping;
import com.dmj.cli.common.constant.BaseResult;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
    #if(${restControllerStyle})
    import org.springframework.web.bind.annotation.RestController;
    #else
    import org.springframework.stereotype.Controller;
    #end
    #if(${swagger2})
    import io.swagger.annotations.Api;
    #end
    #if(${superControllerClassPackage})
    import ${superControllerClassPackage};
    #end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.github.pagehelper.PageInfo;
import java.util.List;
import com.dmj.cli.domain.BaseController;
import com.dmj.cli.domain.query.BaseQuery;
import java.util.List;

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${swagger2})
@Api(tags = "$!{table.comment}")
#end
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} extends BaseController {
#end
    @Autowired
    private ${table.serviceName} service;

    @PostMapping("/save")
    public BaseResult save(@RequestBody ${entity} entity) {
        service.saveOrUpdate(entity);
        return BaseResult.success(entity);
    }

    @PostMapping("/update")
    public BaseResult update(@RequestBody ${entity} entity) {
        service.saveOrUpdate(entity);
        return BaseResult.success(entity);
    }


    @DeleteMapping("/delete")
    public BaseResult delete(@RequestBody List<Long> id) {
        service.removeById(id);
        return BaseResult.success();
    }

    @GetMapping("/info/{id}")
    public BaseResult<${entity}> select(@PathVariable Long id) {
        ${entity} data = service.getById(id);
        return BaseResult.success(data);
    }

    @GetMapping("/page")
    public BaseResult<PageInfo<List<${entity}>>> page(@ModelAttribute BaseQuery query) {
        startPage();
        List<${entity}> list= service.list();
        return pageInfoBaseResult(list);
    }
}

#end
